// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb+srv://ankit:LiveAnkit@cluster0.opdbtv8.mongodb.net/restapipractice?retryWrites=true&w=majority" // Specify the MongoDB database adapter
    url      = env("mongodb+srv://ankit:LiveAnkit@cluster0.opdbtv8.mongodb.net/restapipractice?retryWrites=true&w=majority")
}

model User {
    id    String  @id @default(auto()) @map("_id") @db.ObjectId
    // name type decorator defaultauto map-to-mongo-_id ??
    name  String?
    email String? @unique
    image String?

    // For Stripe
    customerId             String? //TODO:  should I add @unique @map(name:"stripe_customer_id")
    priceId                String? //TODO:  should I add @unique @map(name:"stripe_price_id")
    productId              String? //TODO:  ...
    stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
    // TODO: prefix all maps of stripe with "stripe"?
    emailVerified          DateTime?
    hashedPassword         String?
    confirmPassword        String?
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt
    role                   UserRole  @default(USER)

    // messages Message[]
    settings Settings?
    Account  Account[]
    Post     Post[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String // REVIEW:  what is the db.String decorator for?
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    // RELATIONS
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId]) // the combination of provider and providerAccountId must be unique
}

model VerificationToken {
    id         String   @id @default(cuid()) @map("_id")
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

enum UserRole {
    ADMIN
    USER
}

model Settings {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // RELATIONS
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique @db.ObjectId

    // Settings fields
    darkMode Boolean @default(false)
}

// Model posts
model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // RELATIONS
    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

    // Post fields
    title       String
    content     String
    published   Boolean   @default(false)
    publishedAt DateTime?
}

model LinkedinPost {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    content     String
    published   Boolean   @default(false)
    publishedAt DateTime?

    // RELATIONS
    author Author
}

type DisplayableText {
    content String  @default("")
    isShown Boolean @default(true)
}

type Slide {
    title      DisplayableText
    paragraphs DisplayableText[]
    tagline    DisplayableText
    settings   SlideOverrides
    image      Image
}

type Image {
    url String
}

type SlideOverrides {
    colorPalette ColorPalette
    fontPalette  FontPalette
}

type ColorPalette {
    font       String
    background String
    accent     String
}

type FontPalette {
    primary     String
    secondary   String
    handWriting String
}

model Carousel {
    id         String           @id @default(auto()) @map("_id") @db.ObjectId
    slides     Slide[]
    author     Author
    swipeLabel String           @default("Desliza")
    settings   CarouselSettings
}

type CarouselSettings {
    // default "Desliza"
    colorPalette      ColorPalette
    fontPalette       FontPalette
    backgroundPattern String?

    showSwipeLabel  Boolean
    alternateColors Boolean
    showCounter     Boolean
    showAuthor      Boolean     @default(true)
    aspectRatio     AspectRatio
}

type Author {
    name       String @default("Ricardo Sala")
    pictureUrl String @default("/public/images/placeholders/user.png")
    handle     String @default("@ricsala86")
}

enum AspectRatio {
    SQUARE
    PORTRAIT
}

model PostTemplate {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Post fields
    name    String
    content String
    tags    String[]
}

model PostCategory {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Category fields
    name        String
    description String
    tags        String[]
}
